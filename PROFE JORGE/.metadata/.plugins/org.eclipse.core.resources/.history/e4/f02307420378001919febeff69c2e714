package test;

import static org.junit.jupiter.api.Assertions.*;



import org.junit.jupiter.api.Test;
import dominio.Divisibilidad;

class TestDivisibilidad {

	@Test
	void test01DivisiblePorDos_NoValido() {
		//Arrange
		
		//Act
		boolean actual01 = Divisibilidad.esDivisiblePorDos(3);
		boolean actual02 = Divisibilidad.esDivisiblePorDos(5);
		boolean actual03 = Divisibilidad.esDivisiblePorDos(7);
		boolean actual04 = Divisibilidad.esDivisiblePorDos(9);
		boolean actual05 = Divisibilidad.esDivisiblePorDos(11);
		boolean actual06 = Divisibilidad.esDivisiblePorDos(457);
		boolean actual07 = Divisibilidad.esDivisiblePorDos(895);
		boolean actual08 = Divisibilidad.esDivisiblePorDos(983);
		boolean actual09 = Divisibilidad.esDivisiblePorDos(1297);
		
		//Assert
		assertEquals(false,actual01);
		assertEquals(false,actual02);
		assertEquals(false,actual03);
		assertEquals(false,actual04);
		assertEquals(false,actual05);
		assertEquals(false,actual06);
		assertEquals(false,actual07);
		assertEquals(false,actual08);
		assertEquals(false,actual09);
	}
	@Test
	void test01DivisiblePorTres_NoValido() {
		//Arrange
		
		//Act
		boolean actual01 = Divisibilidad.esDivisiblePorTres(3);
		boolean actual02 = Divisibilidad.esDivisiblePorTres(5);
		boolean actual03 = Divisibilidad.esDivisiblePorTres(7);
		boolean actual04 = Divisibilidad.esDivisiblePorTres(9);
		boolean actual05 = Divisibilidad.esDivisiblePorTres(11);
		boolean actual06 = Divisibilidad.esDivisiblePorTres(457);
		boolean actual07 = Divisibilidad.esDivisiblePorTres(895);
		boolean actual08 = Divisibilidad.esDivisiblePorTres(983);
		boolean actual09 = Divisibilidad.esDivisiblePorTres(1297);
		
		//Assert
		assertEquals(false,actual01);
		assertEquals(false,actual02);
		assertEquals(false,actual03);
		assertEquals(false,actual04);
		assertEquals(false,actual05);
		assertEquals(false,actual06);
		assertEquals(false,actual07);
		assertEquals(false,actual08);
		assertEquals(false,actual09);
	}
	@Test
	void test05DivisiblePorCinco_NoValido() {
		//Arrange
		
				//Act
				boolean actual01 = Divisibilidad.esDivisiblePorCinco(3);
				boolean actual02 = Divisibilidad.esDivisiblePorCinco(5);
				boolean actual03 = Divisibilidad.esDivisiblePorCinco(7);
				boolean actual04 = Divisibilidad.esDivisiblePorCinco(9);
				boolean actual05 = Divisibilidad.esDivisiblePorCinco(11);
				boolean actual06 = Divisibilidad.esDivisiblePorCinco(457);
				boolean actual07 = Divisibilidad.esDivisiblePorCinco(895);
				boolean actual08 = Divisibilidad.esDivisiblePorCinco(983);
				boolean actual09 = Divisibilidad.esDivisiblePorCinco(1297);
				
				//Assert
				assertEquals(false,actual01);
				assertEquals(true,actual02);
				assertEquals(false,actual03);
				assertEquals(false,actual04);
				assertEquals(false,actual05);
				assertEquals(false,actual06);
				assertEquals(true,actual07);
				assertEquals(false,actual08);
				assertEquals(false,actual09);
	}
	@Test
	void test09DivisiblePorNueve_NoValido() {
		//Arrange
		
				//Act
				boolean actual01 = Divisibilidad.esDivisiblePorNueve(3);
				boolean actual02 = Divisibilidad.esDivisiblePorNueve(5);
				boolean actual03 = Divisibilidad.esDivisiblePorNueve(7);
				boolean actual04 = Divisibilidad.esDivisiblePorNueve(9);
				boolean actual05 = Divisibilidad.esDivisiblePorNueve(11);
				boolean actual06 = Divisibilidad.esDivisiblePorNueve(457);
				boolean actual07 = Divisibilidad.esDivisiblePorNueve(895);
				boolean actual08 = Divisibilidad.esDivisiblePorNueve(59049);
				boolean actual09 = Divisibilidad.esDivisiblePorNueve(729);
				
				//Assert
				assertEquals(false,actual01);
				assertEquals(false,actual02);
				assertEquals(false,actual03);
				assertEquals(true,actual04);
				assertEquals(false,actual05);
				assertEquals(false,actual06);
				assertEquals(false,actual07);
				assertEquals(true,actual08);
				assertEquals(true,actual09);
	}
}
